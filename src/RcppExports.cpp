// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ceemdanR
NumericMatrix ceemdanR(NumericVector input, unsigned int ensemble_size = 250, double noise_strength = 0.2, unsigned int S_number = 4, unsigned int num_siftings = 0, unsigned long int rng_seed = 0);
RcppExport SEXP libeemd_ceemdanR(SEXP inputSEXP, SEXP ensemble_sizeSEXP, SEXP noise_strengthSEXP, SEXP S_numberSEXP, SEXP num_siftingsSEXP, SEXP rng_seedSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type ensemble_size(ensemble_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type noise_strength(noise_strengthSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type S_number(S_numberSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type num_siftings(num_siftingsSEXP );
        Rcpp::traits::input_parameter< unsigned long int >::type rng_seed(rng_seedSEXP );
        NumericMatrix __result = ceemdanR(input, ensemble_size, noise_strength, S_number, num_siftings, rng_seed);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// eemdR
NumericMatrix eemdR(NumericVector input, unsigned int ensemble_size = 250, double noise_strength = 0.2, unsigned int S_number = 4, unsigned int num_siftings = 0, unsigned long int rng_seed = 0);
RcppExport SEXP libeemd_eemdR(SEXP inputSEXP, SEXP ensemble_sizeSEXP, SEXP noise_strengthSEXP, SEXP S_numberSEXP, SEXP num_siftingsSEXP, SEXP rng_seedSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type ensemble_size(ensemble_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type noise_strength(noise_strengthSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type S_number(S_numberSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type num_siftings(num_siftingsSEXP );
        Rcpp::traits::input_parameter< unsigned long int >::type rng_seed(rng_seedSEXP );
        NumericMatrix __result = eemdR(input, ensemble_size, noise_strength, S_number, num_siftings, rng_seed);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// extrema
List extrema(NumericVector x);
RcppExport SEXP libeemd_extrema(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        List __result = extrema(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// cspline
NumericVector cspline(NumericVector x, NumericVector y);
RcppExport SEXP libeemd_cspline(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        NumericVector __result = cspline(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
